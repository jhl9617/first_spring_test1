<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">
	

		<!-- 쓸수있는 속성은 마이바티스 API 참고하기 -->
		<!--[[ 쓸수있는 속성 ]]  
			  id="selectPerson"
			  parameterType="int"
			  parameterMap="deprecated"
			  resultType="hashmap"
			  resultMap="personResultMap"
			  flushCache="false"
			  useCache="true"
			  timeout="10"
			  fetchSize="256"
			  statementType="PREPARED"
			  resultSetType="FORWARD_ONLY"  -->


	<!-- 결과 매핑용  -->
	<!-- resultMap 사용용도임 (DB컬럼값과 메소드명이 다를때)-->
	<resultMap id="resultMember" type="Member">
	   <id column="userid" property="userid"/>			<!-- result가 아니라 id라는 엘리먼트를 이용함. => map을 이용할때, 이 컬럼을 key로 이용하겠다는 뜻 -->
	   <result column="userpwd" property="userpwd"/>
	   <result column="username" property="username"/>
	   <result column="age" property="age"/>
	   <result column="gender" property="gender"/>
	   <result column="phone" property="phone"/>
	   <result column="email" property="email"/>
	   <result column="enroll_date" property="enroll_date"/>
	   <result column="lastmodified" property="lastmodified"/>
	   <result column="login_ok" property="login_ok"/>
	   <result column="admin" property="admin"/>
	</resultMap>



	<!-- 로그인 처리용 -->
	<!-- select쿼리문 작성함 // select문을 여러개 작성해야 할 때에는 id로 구분한다. => Dao의 method를 id명으로 쓰면 헷갈리지않음  -->
	<select id="selectLogin" parameterType="Member" resultType="Member">		
			<!-- parameterType => get 값 저장 //  resultType => set 값 저장 && resultMap을 resultType대신 사용해도 됨 -->
			<!-- 연결할 db컬럼명과 클래스명이 다를때는 resultMap을 사용해야함 => 마이바티스 API 참고할것-->
		select * 
		from member
		where userid = #{ userid } 
		  and userpwd = #{ userpwd }				<!-- 물음표대신 #{} 사용 // 중괄호안에는 필드명 작성하면 됨 // 맨뒤에 세미콜론 ; 절대 작성 X-->
		  and login_ok = 'Y'
	</select>

	
	
	<!-- 아이디로 회원정보 조회용 -->
	<!-- resultMap방식으로 연결하는 방법임 -->
   <select id="selectMember" parameterType="Searchs" resultMap="resultMember">
      select * 
      from member
      where userid = #{ userid }
   </select>
	
	
	
	
	<!-- 회원가입시 아이디 중복 체크 처리용  -->
	<select id="selectDupCheckId" parameterType="Searchs" resultType="_int">
	<!-- String이라고 써도 되지만, 마이바티스에 매칭된 별칭인 string 으로 작성하는것이 더 옳다 // resultType도 마이바티스 타입으로 작성함 -->
		select count(userid) 
		from member
		where userid = #{ uid }			<!-- 물음표대신 #{} 사용 // 중괄호안에는 필드명 작성하면 됨 // 맨뒤에 세미콜론 ; 절대 작성 X-->
	</select>		
	<!-- ★★작성한 구문은 dao에서 연결시킨다. -->
	
	
	
	
	<!-- 회원 전체 조회용 -->
	<select id = "selectList" resultMap="resultMember">
		select *
		from member
	</select>
	
	
	
	
	
	<!-- 회원가입 처리용 -->
	<insert id="insertMember" parameterType="Searchs">			<!-- 전달받는값의 타입이 Member임 // insertMember는 Dao의 insertMember메소드를 확인하면 됨 -->
		insert into member (userid, userpwd, username, gender, age, phone, email, 
							enroll_date, lastmodified, signtype, admin, login_ok)	<!--컬럼명 나열함 => 컬럼명순서대로 작성 //대소문자 상관없음-->
		values (#{userid}, #{userpwd}, #{username}, #{gender}, #{age}, #{phone}, #{email}, default, default, default, default, default)
					
		<!-- 컬럼의 default 값을 잘 확인하면서 순서대로 작성한다-->
		<!-- #{}안에 멤버변수명을 작성해주면 알아서 getter가 됨. (vo에 getter가 반드시 있어야 작동함) -->
	</insert>





	<!-- 회원탈퇴 처리용 -->
	<delete id="deleteMember" parameterType="Searchs">		<!-- insert & delete는 기본이 int로 리턴하기때문에  resultType이나 resultMap 작성할 수 없음 -->
		delete from member
		where userid = #{ uid }			<!-- 값 1개에 대한 변수적용은 변수이름 아무거나 해도 됨  (uid)  but, 여러개일때는 순서대로 똑같이 써줘야한다.-->
	</delete>





	<!-- 회원정보 수정용 -->
	<update id="updateMember" parameterType="Searchs">		<!--전달받는값의 타입이 Member임  // 수정안된 값은 그냥 똑같이 덮어씌우기 하는거라고 생각하면 됨-->
		update member
		set userpwd = #{userpwd}, 
			 age= #{age},
			 phone= #{phone}, 
			 email= #{email},
			 lastmodified= sysdate
		where userid = #{userid}		
	</update>





	<update id="updateLoginok" parameterType="Searchs">		<!--전달받는값의 타입이 Member임  // 수정안된 값은 그냥 똑같이 덮어씌우기 하는거라고 생각하면 됨-->
		update member
		set login_ok = #{login_ok}
		where userid = #{userid}
	</update>




	<!--검색용 select  -->
	<select id="selectSearchUserid" resultMap="resultMember" parameterType="Searchs" >		<!-- Type은 마이바티스 타입으로 작성함 -->
		select *
		from member
		where userid like '%' || #{keyword} || '%'
	</select>	<!-- 아이디의 형태가 '%' || #{keyword} || '%' 와 같은 userid를 select해라 -->

	<select id="selectSearchGender" resultMap="resultMember" parameterType="Searchs">
		select *
		from member
		where gender = #{keyword}
	</select>



	<!--sql구문에 if문 넣기 => 동적 SQL 에서 가장 공통적으로 사용되는 것으로 where의 일부로 포함될 수 있다  -->
	<select id="selectSearchAge" resultMap="resultMember" parameterType="Searchs">
		select *
		from member
			<if test ="age == 60">		<!-- 전달받은값이 60으로 왔다면 // 값 1개 전달받을때의 변수 (valueage)는 내맘대로 정해도 됨. 여기 지역변수라고 생각하면된다-->
				<![CDATA[
				where age >= #{value}
				]]>
			</if>
			<if test="age != 60">			<!--  60이 아니라면(20,30,40,50대라면) -->
				where age between #{age} and #{age} +9		<!-- {  전달받은값(20,30,40,50)  }  ~  {  전달받은값+9(29,39,49,59)  } -->
			</if>
	</select>



	<!-- 마이바티스 mybatis-config.xml 에 등록해야 별칭으로 사용할 수 있음 => 등록안할꺼면 사용구문을 모두 적으면 됨 -->
	<select id="selectSearchEnrollDate" resultMap="resultMember"  parameterType="Searchs">		
		select *
		from member
		where enroll_date between #{begin} and #{end}
	</select>

	<select id="selectSearchLoginOk" resultMap="resultMember" parameterType="Searchs">
		select *
		from member
		where login_ok = #{keyword}
	</select>





</mapper>







