<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!-- 하단의 Namespaces에서 aop, tx도 체크해준다.  -->
	<!-- JDBCTemple에서 하던일을 이곳에서 다 한다고 생각하면 됨 -->
	
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- DataSource 등록 -->	
   	 <bean class="org.apache.commons.dbcp.BasicDataSource" id="realDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="c##student" />
		<property name="password" value="student" />
	</bean>
	
  <!--<bean class="org.apache.commons.dbcp.BasicDataSource" id="realDataSource" destroy-method="close">
      <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
      <property name="url" value="jdbc:oracle:thin:@(description=(retry_count=20)(retry_delay=3)(address=(protocol=tcps)(port=1522)(host=adb.ap-chuncheon-1.oraclecloud.com))(connect_data=(service_name=g0f5339ad903885_dg5yvqfc49gr55s7_high.adb.oraclecloud.com))(security=(ssl_server_dn_match=yes)))" />

      <property name="username" value="student" />
      <property name="password" value="TestTest0123" />
   </bean>-->
	
<!-- 	<bean class="org.apache.commons.dbcp.BasicDataSource" id="realDataSource" destroy-method="close">
      <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
      <property name="url" value="jdbc:oracle:thin:@(description=(retry_count=20)(retry_delay=3)(address=(protocol=tcps)(port=1522)(host=adb.ap-chuncheon-1.oraclecloud.com))(connect_data=(service_name=g0f5339ad903885_dg5yvqfc49gr55s7_high.adb.oraclecloud.com))(security=(ssl_server_dn_match=yes)))" />

      <property name="username" value="student" />
      <property name="password" value="TestTest0123" />
   </bean> -->
	
	<!-- 없어도 되는 파트이지만 넣어두었뜸 (자동 로그 출력하는 구문임)-->
	<!-- 전달값이 적용되어 실행되는 query 문과 resultSet 결과값을 
		로그로 출력되게 하려면, dataSource 에 로그 연결 설정을 함
	 -->
	<!-- pom.xml 의 log4jdbc-remix 관련 dataSource 처리 -->
	<bean id="dataSource"	class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="realDataSource" />		<!-- ★위쪽에 있는 id인 realDataSource를 ref로 연결처리해서 동일하게 넣어주어야 연결이 됨! -->
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
			<property name="loggingType" value="MULTI_LINE" />		<!-- MULTI_LINE => 여러줄로 출력시키겠다는 설정임 -->
			<property name="sqlPrefix" value="[SQL] " />
			</bean>
		</property>
	</bean>

	<!-- Spring과 MyBatis 연동 설정 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSession">
		<property name="configLocation" value="classpath:mybatis-config.xml" />		
		<property name="dataSource" ref="dataSource" />		<!-- ★위쪽에 있는 name인 sqlPrefix를 ref로 연결처리해서 동일하게 넣어주어야 연결이 됨! -->
	</bean>
	
	<!-- dao 에서 사용할 MyBatis 객체 생성 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSession"></constructor-arg>		<!-- ★위쪽에 있는 name인 sqlPrefix를 ref로 연결처리해서 동일하게 넣어주어야 연결이 됨! -->
	</bean>

	<!-- 트랜잭션 관리 설정 -->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- service 에서 필요한 시점에서 commit | rollback 이 구동되게 aop 설정 처리 -->	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" rollback-for="Exception" />	
			<!-- select로 시작하는 메소드는 모두 '읽기 전용'이다 // exception이 발생하면 무조건 rollback한다 -->
			<tx:method name="insert*" rollback-for="Exception" />
			<tx:method  name="update*" rollback-for="Exception" />
			<tx:method  name="delete*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(* org.ict.first..*Impl.*(..))" id="serviceMethod" />		
		<!-- ..* : 뭐시기뭐시기 붙은 메소드들 모두 // Impl.*(..) : Impl이 붙은 모든 메소드들  (서비스를 상속받는 클래스들은 모두 Impl을 뒤에 붙여줘야 함) -->
		<aop:advisor advice-ref="txAdvice" id="transactionAdvisor" pointcut-ref="serviceMethod" />
	</aop:config>
</beans>





